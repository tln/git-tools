#!/bin/bash
# git-cleanup-repo
#
# Author: Rob Miller <rob@bigfish.co.uk>
# Adapted from the original by Yorick Sijsling

# Get the default branch. Change
# refs/heads/staging to origin/staging
defaultBranchLocal=$(git remote show origin | grep "HEAD branch" | tr -d ' ' | cut -d: -f2)
defaultBranchOrigin=origin/${defaultBranchLocal}

# List of protected branches. It's up to the user to add their protected branches.
# The default branch is used if this setting is not set.
# TODO ask?
protectedBranches=$(git config --get-all core.protected-branches || echo $defaultBranchLocal)

echo "$defaultBranchLocal"
echo "$defaultBranchOrigin"
echo $protectedBranches
git checkout $defaultBranchLocal &> /dev/null

# Make sure we're working with the most up-to-date version of master.
git fetch

# Prune obsolete remote tracking branches. These are branches that we
# once tracked, but have since been deleted on the remote.
git remote prune origin

# List all the branches that have been merged fully into master, and
# then delete them. We use the remote master here, just in case our
# local master is out of date.
git branch --merged $defaultBranchOrigin | grep -vwf <(echo "$protectedBranches") | xargs -t git branch -d

# Now the same, but including remote branches.
MERGED_ON_REMOTE=`git branch -r --merged $defaultBranchOrigin | sed 's/ *origin\///' | grep -vwf <(echo "$protectedBranches")`

if [ "$MERGED_ON_REMOTE" ]; then
	echo "The following remote branches are fully merged and would be removed:"
	echo $MERGED_ON_REMOTE

	read -p "Continue (y/N)? "
	if [ "$REPLY" == "y" ]; then
		for b in $MERGED_ON_REMOTE; do 
            git push origin :$b
        done
		echo "Done"
	fi
fi